name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-node:
    name: Test Node.js API
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npx eslint server/ --ext .js --max-warnings 0
      continue-on-error: true

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  test-solver:
    name: Test Python Solver
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      working-directory: ./solver
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run solver tests
      working-directory: ./solver
      run: pytest -v --cov=. --cov-report=xml

    - name: Upload Python coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./solver/coverage.xml
        flags: solver
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-node, test-solver]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        cd solver && pip install -r requirements.txt

    - name: Build Docker images
      run: docker compose build

    - name: Run integration tests
      run: |
        docker compose up -d
        sleep 30
        npm run test:integration || (docker compose logs && exit 1)
        docker compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-node, test-solver]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Node.js image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: task-manager:test

    - name: Build Solver image
      uses: docker/build-push-action@v5
      with:
        context: ./solver
        file: ./solver/Dockerfile
        push: false
        tags: task-manager-solver:test

    - name: Test Docker Compose
      run: |
        docker compose config
        docker compose up -d --build
        sleep 30
        curl -f http://localhost:3000/api/tasks || exit 1
        curl -f http://localhost:8001/health || exit 1
        docker compose down

  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check Prettier formatting
      run: npx prettier --check "**/*.{js,json,md}"
      continue-on-error: true

    - name: Run JSHint
      run: npx jshint server/ || true
      continue-on-error: true

    - name: Check package.json for security issues
      run: npm audit --production --audit-level moderate

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g clinic autocannon

    - name: Start services
      run: |
        docker compose up -d --build
        sleep 45

    - name: Run performance tests
      run: |
        echo "Running basic load test..."
        autocannon -c 10 -d 30s http://localhost:3000/api/tasks || true
        echo "Performance test completed"

    - name: Cleanup
      run: docker compose down

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test-node, test-solver, integration-test, docker-build]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test-node.result == 'success' && needs.test-solver.result == 'success' && needs.integration-test.result == 'success'
      run: echo "✅ All tests passed! Ready for deployment."

    - name: Notify on failure
      if: needs.test-node.result == 'failure' || needs.test-solver.result == 'failure' || needs.integration-test.result == 'failure'
      run: echo "❌ Tests failed. Please check the logs and fix issues before merging."